

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64', 'res': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'res': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'res': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Search 'res' in {'n': 'i64', 'res': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrVarLocal(op='get', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))]
Statement: Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))]
Statement: Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))]
Statement: Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Search 'b1' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Search 'b2' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Search 'b3' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Search 'b4' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())), Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 4 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int())))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=4)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'a': 'i64', 'b': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=846976)
WasmInstrConst(ty='i64', val=846976)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'c': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'c': 'i32', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'c': 'i32', 'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
Statement: IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=700, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700)]
Expression: IntConst(value=77, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=77)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'c': 'i32', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='gt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='ge_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=0)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'c': 'i64'}
Statement: Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Expression: IntConst(value=22, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=22)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=20, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Search 'c' in {'a': 'i64', 'b': 'i64', 'c': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))]), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='u'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u'))]
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='w'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'x' in {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$u'))
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 40 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))]), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 16 (<class 'int'>) to wasm data type.
  -> Try to compile 17 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int())))
Expression: IntConst(value=16, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=16)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int())))
Expression: IntConst(value=17, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=17)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=16)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=17)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=1)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrConst(ty='i32', val=0), WasmInstrIntRelOp(ty='i32', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrConst(ty='i32', val=0), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrConst(ty='i32', val=0)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='u'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u'))]
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$u'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$v'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$u'))
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i32', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 40 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'z': 'i64'})
  -> Try to compile 775 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))
Expression: IntConst(value=775, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=775)]
 -> Return statements: [WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])] (current var_types: {'y': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {'y': 'i64'})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'y': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'y': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'z': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrIntRelOp(ty='i64', op='le_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=0)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: WhileStmt(cond=BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=100, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=100)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [WhileStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))]), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: WhileStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrConst(ty='i64', val=42)
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='m'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='m'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m'))]
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: Assign(var=Ident(name='i'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: Name(name=Ident(name='m'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$m'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$m'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), WhileStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), body=[IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])] (current var_types: {'x': 'i32', 'y': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile False (<class 'bool'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: WhileStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), body=[IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i32', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=27, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27)]
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrConst(ty='i64', val=27)
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'i': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='v'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='w'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='v'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
Expression: IntConst(value=7, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=7)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='w'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'z' in {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$v'))
WasmInstrConst(ty='i64', val=42)
WasmInstrVarLocal(op='set', id=WasmId(id='$w'))
WasmInstrVarLocal(op='get', id=WasmId(id='$v'))
WasmInstrConst(ty='i64', val=7)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$w'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=6, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='p'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile 6 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=6, ty=NotVoid(ty=Int())))
Expression: IntConst(value=6, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=6)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='p'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$p'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='p'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'p' in {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=6)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$p'))
WasmInstrVarLocal(op='get', id=WasmId(id='$p'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=4)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=40)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=10, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 10 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=10, ty=NotVoid(ty=Int())))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=52, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=52)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=52)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Expression: UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=42)
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=34, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34)]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=34)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=42)
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x1'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x2'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x3'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x4'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x5'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x6'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x7'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x8'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x9'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x10'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x11'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x12'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x13'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x14'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x15'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x16'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'}
Statement: Assign(var=Ident(name='x1'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1'))]
Statement: Assign(var=Ident(name='x2'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2'))]
Statement: Assign(var=Ident(name='x3'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3'))]
Statement: Assign(var=Ident(name='x4'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4'))]
Statement: Assign(var=Ident(name='x5'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5'))]
Statement: Assign(var=Ident(name='x6'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6'))]
Statement: Assign(var=Ident(name='x7'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7'))]
Statement: Assign(var=Ident(name='x8'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8'))]
Statement: Assign(var=Ident(name='x9'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9'))]
Statement: Assign(var=Ident(name='x10'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10'))]
Statement: Assign(var=Ident(name='x11'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11'))]
Statement: Assign(var=Ident(name='x12'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12'))]
Statement: Assign(var=Ident(name='x13'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13'))]
Statement: Assign(var=Ident(name='x14'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14'))]
Statement: Assign(var=Ident(name='x15'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15'))]
Statement: Assign(var=Ident(name='x16'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x16'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x1'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x2'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x2'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x3'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x3'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x4'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x4'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x5'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x5'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x6'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x6'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x7'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x7'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x8'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x8'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x9'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x9'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x10'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x10'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x11'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x11'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x12'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x12'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x13'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x13'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x14'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x14'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x15'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x15'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x16'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x16'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x1' in {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x16')), WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x1'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x2'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x3'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x4'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x5'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x6'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x7'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x8'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x9'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x10'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x11'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x12'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x13'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x14'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x15'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x16'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x1'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x2'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x3'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x4'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x5'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x6'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x7'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x8'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x9'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x10'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x11'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x12'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x13'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x14'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x15'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x16'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=26, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26)]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=26)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=40)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=10, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 10 (<class 'int'>) to wasm data type.
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'y': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'y': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='y'), right=IntConst(value=10, ty=NotVoid(ty=Int())))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=27, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'y': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=27)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=20, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=20)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'z' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=5)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=5)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=1)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=5)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Search 'b' in {'a': 'i64', 'b': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=42)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=1)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='c'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='d'), right=Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'}
Statement: Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: Assign(var=Ident(name='c'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='d'), right=Name(name=Ident(name='c'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c')), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrVarLocal(op='set', id=WasmId(id='$d'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$d'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$d'))]
Search 'd' in {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$d')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c')), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrVarLocal(op='set', id=WasmId(id='$d')), WasmInstrVarLocal(op='get', id=WasmId(id='$d')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrVarLocal(op='set', id=WasmId(id='$c'))
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrVarLocal(op='set', id=WasmId(id='$d'))
WasmInstrVarLocal(op='get', id=WasmId(id='$d'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=38, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38)]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=38)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64', 'res': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'res': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'res': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))]
Statement: Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))]
Statement: Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))]
Statement: Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Search 'b1' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Search 'b2' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Search 'b3' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Search 'b4' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())), Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 4 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int())))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=4)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=846976)
WasmInstrConst(ty='i64', val=846976)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'c': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'c': 'i32', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'c': 'i32', 'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='gt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64', 'res': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'res': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'res': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Search 'res' in {'n': 'i64', 'res': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrVarLocal(op='get', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))]
Statement: Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))]
Statement: Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))]
Statement: Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Search 'b1' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Search 'b2' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Search 'b3' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Search 'b4' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())), Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 4 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int())))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=4)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'a': 'i64', 'b': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=846976)
WasmInstrConst(ty='i64', val=846976)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'c': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'c': 'i32', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'c': 'i32', 'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
Statement: IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=700, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700)]
Expression: IntConst(value=77, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=77)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'c': 'i32', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='gt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='ge_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=0)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'c': 'i64'}
Statement: Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Expression: IntConst(value=22, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=22)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=20, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Search 'c' in {'a': 'i64', 'b': 'i64', 'c': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))]), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='u'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u'))]
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='w'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'x' in {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$u'))
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 40 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))]), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 16 (<class 'int'>) to wasm data type.
  -> Try to compile 17 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int())))
Expression: IntConst(value=16, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=16)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int())))
Expression: IntConst(value=17, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=17)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=16)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=17)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=1)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64', 'res': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'res': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'res': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Search 'res' in {'n': 'i64', 'res': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrVarLocal(op='get', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))]
Statement: Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))]
Statement: Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))]
Statement: Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Search 'b1' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Search 'b2' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Search 'b3' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Search 'b4' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())), Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 4 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int())))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=4)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'a': 'i64', 'b': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=846976)
WasmInstrConst(ty='i64', val=846976)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'c': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'c': 'i32', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'c': 'i32', 'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
Statement: IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=700, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700)]
Expression: IntConst(value=77, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=77)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'c': 'i32', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='gt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_bool'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_bool'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_bool'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[]), Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
  -> Try to compile 3 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=3, ty=NotVoid(ty=Int())))
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[]), WasmInstrConst(ty='i64', val=3), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[])
WasmInstrConst(ty='i64', val=3)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'n': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64', 'res': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'res': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'res': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Less(), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='res'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='res'), right=BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='res'), ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res'))]
Statement: Assign(var=Ident(name='n'), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='res'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$res'))]
Search 'res' in {'n': 'i64', 'res': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrVarLocal(op='get', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$res')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$res')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='b1'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))]
Statement: Assign(var=Ident(name='b2'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))]
Statement: Assign(var=Ident(name='b3'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))]
Statement: Assign(var=Ident(name='b4'), right=BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool())), op=NotEq(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b1'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))]
Search 'b1' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b2'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))]
Search 'b2' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b3'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))]
Search 'b3' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: Name(name=Ident(name='b4'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))]
Search 'b4' in {'x': 'i64', 'b1': 'i32', 'b2': 'i32', 'b3': 'i32', 'b4': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b1')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$b2')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b3')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrConst(ty='i32', val=1), WasmInstrIntRelOp(ty='i32', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$b4')), WasmInstrVarLocal(op='get', id=WasmId(id='$b1')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b2')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b3')), WasmInstrCall(id=WasmId(id='$print_bool')), WasmInstrVarLocal(op='get', id=WasmId(id='$b4')), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b1'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$b2'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b3'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIntRelOp(ty='i32', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$b4'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b1'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b2'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b3'))
WasmInstrCall(id=WasmId(id='$print_bool'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b4'))
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())), Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))] (current var_types: {})
  -> Try to compile 4 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i32'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=4, ty=NotVoid(ty=Int())))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: Assign(var=Ident(name='y'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))], ty=Void())
Expression: BinOp(left=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=4), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrCall(id=WasmId(id='$print_bool'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=4)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrCall(id=WasmId(id='$print_bool'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[], elseBody=[])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'a': 'i64', 'b': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=846976, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=846976, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
Expression: IntConst(value=846976, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=846976), WasmInstrConst(ty='i64', val=846976), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=846976)
WasmInstrConst(ty='i64', val=846976)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))]), IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'c': 'i32'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'c': 'i32', 'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'c': 'i32', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'c': 'i32', 'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
Statement: IfStmt(cond=Name(name=Ident(name='c'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=700, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=77, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=700, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700)]
Expression: IntConst(value=77, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=77)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'c': 'i32', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=700), WasmInstrConst(ty='i64', val=77), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='gt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=GreaterEq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='ge_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=0)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64', 'j': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='j'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'i': 'i64', 'j': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'c': 'i64'}
Statement: Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=22, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Expression: IntConst(value=22, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=22)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='c'), right=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=20, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: IntConst(value=20, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
Search 'c' in {'a': 'i64', 'b': 'i64', 'c': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])]), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrConst(ty='i64', val=22), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=20), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))])])
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Less(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrIntRelOp(ty='i64', op='lt_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))]), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))], elseBody=[Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))])
Expression: BinOp(left=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Greater(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=GreaterEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='u'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='z'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='u'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u'))]
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BinOp(left=Name(name=Ident(name='w'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='w'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'x' in {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'w': 'i32', 'z': 'i32'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ge_s'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$u'))
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 40 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))]), IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 16 (<class 'int'>) to wasm data type.
  -> Try to compile 17 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=16, ty=NotVoid(ty=Int())))
Expression: IntConst(value=16, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=16)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=IntConst(value=17, ty=NotVoid(ty=Int())))
Expression: IntConst(value=17, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=17)]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Search 'a' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: IfStmt(cond=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'a': 'i64', 'b': 'i64', 'z': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=16), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrConst(ty='i64', val=17), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=16)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrConst(ty='i64', val=17)
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$print_i64'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=1)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=-1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i32'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i32'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: IfStmt(cond=Name(name=Ident(name='z'), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=1), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=1)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=Eq(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrConst(ty='i32', val=0), WasmInstrIntRelOp(ty='i32', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrConst(ty='i32', val=0), WasmInstrIntRelOp(ty='i32', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrConst(ty='i32', val=0)
WasmInstrIntRelOp(ty='i32', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))), IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='u'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u'))]
Statement: Assign(var=Ident(name='v'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=NotEq(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: IfStmt(cond=UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: UnOp(op=Not(), arg=BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Name(name=Ident(name='u'), ty=NotVoid(ty=Bool())), op=And(), right=Name(name=Ident(name='v'), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='u'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u'))]
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'x': 'i64', 'y': 'i64', 'u': 'i32', 'v': 'i32', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrVarLocal(op='set', id=WasmId(id='$u')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrIntRelOp(ty='i64', op='ne'), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='get', id=WasmId(id='$u')), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrVarLocal(op='set', id=WasmId(id='$u'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrIntRelOp(ty='i64', op='ne')
WasmInstrVarLocal(op='set', id=WasmId(id='$v'))
WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='get', id=WasmId(id='$u'))
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$v'))], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=False, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=0)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=And(), right=BoolConst(value=True, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i32', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: IfStmt(cond=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 40 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64', 'z': 'i64'})
  -> Try to compile 775 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: IfStmt(cond=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=40, ty=NotVoid(ty=Int())))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=775, ty=NotVoid(ty=Int())))
Expression: IntConst(value=775, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=775)]
 -> Return statements: [WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=0)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=2), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=775), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))], elseInstrs=[WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))])
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])] (current var_types: {'y': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))] (current var_types: {'y': 'i64'})
  -> Try to compile 777 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'y': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'y': 'i64'}
Statement: IfStmt(cond=BoolConst(value=True, ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))], elseBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])])
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=777, ty=NotVoid(ty=Int())))
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'z': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'z': 'i64'}
Statement: IfStmt(cond=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=LessEq(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Search 'z' in {'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrIntRelOp(ty='i64', op='le_s')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))], elseInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))])
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: UnOp(op=Not(), arg=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrConst(ty='i32', val=0), WasmInstrNumBinOp(ty='i32', op='xor'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrConst(ty='i32', val=0)
WasmInstrNumBinOp(ty='i32', op='xor')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=IntConst(value=0, ty=NotVoid(ty=Int())), op=Eq(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: IfStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=32, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: IntConst(value=32, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=32)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=1), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=1)
WasmInstrIntRelOp(ty='i64', op='eq')
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=10), WasmInstrConst(ty='i64', val=32), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=0)
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: IfStmt(cond=BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), thenBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))], elseBody=[StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BinOp(left=BoolConst(value=True, ty=NotVoid(ty=Bool())), op=Or(), right=BoolConst(value=False, ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=777, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=777, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=777)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrConst(ty='i32', val=0)])
WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))], elseInstrs=[WasmInstrConst(ty='i64', val=777), WasmInstrCall(id=WasmId(id='$print_i64'))])

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'n': 'i64'})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'n': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'n': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: WhileStmt(cond=BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: BinOp(left=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool())), op=Or(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), op=And(), right=BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), ty=NotVoid(ty=Bool()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Less(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s')]
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)])]
Expression: BinOp(left=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=100, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
Expression: IntConst(value=100, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=100)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')])]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='lt_s'), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')], elseInstrs=[WasmInstrConst(ty='i32', val=0)]), WasmInstrIf(resultType='i32', thenInstrs=[WasmInstrConst(ty='i32', val=1)], elseInstrs=[WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=100), WasmInstrIntRelOp(ty='i64', op='gt_s')]), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [WhileStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))]), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: WhileStmt(cond=BoolConst(value=False, ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))])
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=1, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrConst(ty='i32', val=0), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrConst(ty='i64', val=42)
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='m'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64'})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='m'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m'))]
Statement: Assign(var=Ident(name='n'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n'))]
Statement: Assign(var=Ident(name='i'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='m'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: Name(name=Ident(name='m'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$m'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='j'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=LessEq(), right=Name(name=Ident(name='n'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: Name(name=Ident(name='n'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$n'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='j'), right=BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='j'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='j'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'm': 'i64', 'n': 'i64', 'i': 'i64', 'j': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$m')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$n')), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$m'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$n'))
WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrVarLocal(op='get', id=WasmId(id='$m')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrVarLocal(op='get', id=WasmId(id='$n')), WasmInstrIntRelOp(ty='i64', op='le_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$j')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$j')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), WhileStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), body=[IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])] (current var_types: {'x': 'i32', 'y': 'i64'})
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile False (<class 'bool'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i32', 'y': 'i64'})
  -> Try to compile True (<class 'bool'>) to wasm data type.
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i32', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i32', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: UnOp(op=USub(), arg=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: WhileStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), body=[IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: IfStmt(cond=Name(name=Ident(name='x'), ty=NotVoid(ty=Bool())), thenBody=[Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))], elseBody=[Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool()))), Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))])
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=False, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=False, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=0)]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='x'), right=BoolConst(value=True, ty=NotVoid(ty=Bool())))
Expression: BoolConst(value=True, ty=NotVoid(ty=Bool()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i32', val=1)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))])]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i32', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i32', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=1)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrIf(resultType=None, thenInstrs=[WasmInstrConst(ty='i32', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))], elseInstrs=[WasmInstrConst(ty='i32', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Bool() (<class 'lang_loop.loop_ast.Bool'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'x': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=27, ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=27, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27)]
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrConst(ty='i64', val=27), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrConst(ty='i64', val=27)
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
  -> Try to compile 5 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64', 'i': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64', 'i': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64', 'i': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
Statement: WhileStmt(cond=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Greater(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: Assign(var=Ident(name='i'), right=BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='i'), ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='i'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64', 'i': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$i'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='gt_s'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrVarLocal(op='get', id=WasmId(id='$i')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$i')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int()))), WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))]), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 0 (<class 'int'>) to wasm data type.
Try to extract stmt: [Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))] (current var_types: {'sum': 'i64'})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'sum': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'sum': 'i64'}
Statement: Assign(var=Ident(name='sum'), right=IntConst(value=0, ty=NotVoid(ty=Int())))
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
Statement: WhileStmt(cond=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool())), body=[Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))])
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Eq(), right=IntConst(value=0, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Bool()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq')]
Statement: Assign(var=Ident(name='sum'), right=BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='sum'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=1, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='sum'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))]
Search 'sum' in {'sum': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrVarLocal(op='set', id=WasmId(id='$sum'))
WasmInstrBlock(label=WasmId(id='$loop_exit'), result=None, body=[WasmInstrLoop(label=WasmId(id='$loop_start'), body=[WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=0), WasmInstrIntRelOp(ty='i64', op='eq'), WasmInstrIf(resultType=None, thenInstrs=[], elseInstrs=[WasmInstrBranch(target=WasmId(id='$loop_exit'), conditional=False)]), WasmInstrVarLocal(op='get', id=WasmId(id='$sum')), WasmInstrConst(ty='i64', val=1), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$sum')), WasmInstrBranch(target=WasmId(id='$loop_start'), conditional=False)])])
WasmInstrVarLocal(op='get', id=WasmId(id='$sum'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='v'), right=IntConst(value=1, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='w'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 1 (<class 'int'>) to wasm data type.
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='v'), right=IntConst(value=1, ty=NotVoid(ty=Int())))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v'))]
Statement: Assign(var=Ident(name='w'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='v'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=7, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='v'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v'))]
Expression: IntConst(value=7, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=7)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='w'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='w'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$w'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'z' in {'v': 'i64', 'w': 'i64', 'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrVarLocal(op='set', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$w')), WasmInstrVarLocal(op='get', id=WasmId(id='$v')), WasmInstrConst(ty='i64', val=7), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$w')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrVarLocal(op='set', id=WasmId(id='$v'))
WasmInstrConst(ty='i64', val=42)
WasmInstrVarLocal(op='set', id=WasmId(id='$w'))
WasmInstrVarLocal(op='get', id=WasmId(id='$v'))
WasmInstrConst(ty='i64', val=7)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$w'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=IntConst(value=6, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='p'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile 6 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=IntConst(value=6, ty=NotVoid(ty=Int())))
Expression: IntConst(value=6, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=6)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: Assign(var=Ident(name='p'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$p'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='p'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='p'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'p' in {'x': 'i64', 'y': 'i64', 'z': 'i64', 'p': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=6), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$p')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=6)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$p'))
WasmInstrVarLocal(op='get', id=WasmId(id='$p'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=IntConst(value=4, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=4, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=4)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=4), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=4)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=40), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=40)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=10, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 10 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=10, ty=NotVoid(ty=Int())))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=52, ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=52, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=52)]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=52), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=52)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=42, ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Expression: UnOp(op=USub(), arg=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=42)
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=34, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=34, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34)]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=34), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=34)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=42, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=42), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=42)
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x1'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x2'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x3'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x4'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x5'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x6'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x7'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x8'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x9'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x10'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x11'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x12'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x13'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x14'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x15'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x16'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'}
Statement: Assign(var=Ident(name='x1'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1'))]
Statement: Assign(var=Ident(name='x2'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2'))]
Statement: Assign(var=Ident(name='x3'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3'))]
Statement: Assign(var=Ident(name='x4'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4'))]
Statement: Assign(var=Ident(name='x5'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5'))]
Statement: Assign(var=Ident(name='x6'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6'))]
Statement: Assign(var=Ident(name='x7'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7'))]
Statement: Assign(var=Ident(name='x8'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8'))]
Statement: Assign(var=Ident(name='x9'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9'))]
Statement: Assign(var=Ident(name='x10'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10'))]
Statement: Assign(var=Ident(name='x11'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11'))]
Statement: Assign(var=Ident(name='x12'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12'))]
Statement: Assign(var=Ident(name='x13'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13'))]
Statement: Assign(var=Ident(name='x14'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14'))]
Statement: Assign(var=Ident(name='x15'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15'))]
Statement: Assign(var=Ident(name='x16'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x16'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x1'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x1'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x2'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x2'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x2'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x3'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x3'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x3'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x4'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x4'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x4'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x5'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x5'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x5'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x6'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x6'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x6'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x7'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x7'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x7'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x8'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x8'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x8'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x9'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x9'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x9'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x10'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x10'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x10'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x11'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x11'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x11'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x12'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x12'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x12'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x13'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x13'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x13'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x14'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x14'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x14'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x15'), ty=NotVoid(ty=Int())), op=Add(), right=UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x15'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x15'))]
Expression: UnOp(op=USub(), arg=Name(name=Ident(name='x16'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x16'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x16'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x1' in {'x1': 'i64', 'x2': 'i64', 'x3': 'i64', 'x4': 'i64', 'x5': 'i64', 'x6': 'i64', 'x7': 'i64', 'x8': 'i64', 'x9': 'i64', 'x10': 'i64', 'x11': 'i64', 'x12': 'i64', 'x13': 'i64', 'x14': 'i64', 'x15': 'i64', 'x16': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x1')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x2')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x3')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x4')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x5')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x6')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x7')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x8')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x9')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x10')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x11')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x12')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x13')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x14')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x15')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x16')), WasmInstrVarLocal(op='get', id=WasmId(id='$x1')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x2')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x3')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x4')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x5')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x6')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x7')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x8')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x9')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x10')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x11')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x12')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x13')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x14')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x15')), WasmInstrConst(ty='i64', val=-1), WasmInstrVarLocal(op='get', id=WasmId(id='$x16')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x1'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x2'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x3'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x4'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x5'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x6'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x7'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x8'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x9'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x10'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x11'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x12'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x13'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x14'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x15'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x16'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x1'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x2'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x3'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x4'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x5'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x6'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x7'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x8'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x9'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x10'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x11'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x12'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x13'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x14'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x15'))
WasmInstrConst(ty='i64', val=-1)
WasmInstrVarLocal(op='get', id=WasmId(id='$x16'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Mul(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[IntConst(value=0, ty=NotVoid(ty=Int()))], ty=Void())
Expression: IntConst(value=0, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0)]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=0)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=0), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=0)
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64'}
Statement: Assign(var=Ident(name='x'), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=IntConst(value=2, ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Mul(), right=IntConst(value=3, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: IntConst(value=3, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=3)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Search 'x' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Search 'y' in {'x': 'i64', 'y': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=1), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=3), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$print_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=1)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=3)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$print_i64'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=26, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=26, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26)]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=26), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=26)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=40, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=40, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=40), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=40)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: UnOp(op=USub(), arg=UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: UnOp(op=USub(), arg=IntConst(value=42, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=-1), WasmInstrConst(ty='i64', val=42), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrNumBinOp(ty='i64', op='mul'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=-1)
WasmInstrConst(ty='i64', val=42)
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrNumBinOp(ty='i64', op='mul')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='y'), right=IntConst(value=10, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 10 (<class 'int'>) to wasm data type.
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'y': 'i64', 'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'y': 'i64', 'x': 'i64'}
Statement: Assign(var=Ident(name='y'), right=IntConst(value=10, ty=NotVoid(ty=Int())))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='x'), right=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=27, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: IntConst(value=27, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=27)]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'x' in {'y': 'i64', 'x': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=27), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=27)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=10, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=IntConst(value=20, ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=20, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20)]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=10), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrConst(ty='i64', val=20), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=10)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrConst(ty='i64', val=20)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'z' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=5, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Sub(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: BinOp(left=IntConst(value=5, ty=NotVoid(ty=Int())), op=Add(), right=IntConst(value=2, ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrConst(ty='i64', val=5), WasmInstrConst(ty='i64', val=2), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=5)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=5)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=1)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrConst(ty='i64', val=5)
WasmInstrConst(ty='i64', val=2)
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=IntConst(value=42, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 42 (<class 'int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64'}
Statement: Assign(var=Ident(name='a'), right=IntConst(value=42, ty=NotVoid(ty=Int())))
Expression: IntConst(value=42, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=42)]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
Search 'b' in {'a': 'i64', 'b': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=42), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=42)
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int()))), Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='z'), right=IntConst(value=2, ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile 5 (<class 'int'>) to wasm data type.
  -> Try to compile 2 (<class 'int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64', 'y': 'i64', 'z': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64', 'y': 'i64', 'z': 'i64'}
Statement: Assign(var=Ident(name='x'), right=IntConst(value=5, ty=NotVoid(ty=Int())))
Expression: IntConst(value=5, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=5)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: Assign(var=Ident(name='y'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y'))]
Statement: Assign(var=Ident(name='z'), right=IntConst(value=2, ty=NotVoid(ty=Int())))
Expression: IntConst(value=2, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=2)]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$z'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='y'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='y'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Sub(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub')]
Expression: BinOp(left=IntConst(value=1, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=1, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1)]
Expression: BinOp(left=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())), op=Sub(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='z'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='z'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$z'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Search 'y' in {'x': 'i64', 'y': 'i64', 'z': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrConst(ty='i64', val=5), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$y')), WasmInstrConst(ty='i64', val=2), WasmInstrVarLocal(op='set', id=WasmId(id='$z')), WasmInstrVarLocal(op='get', id=WasmId(id='$y')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrConst(ty='i64', val=1), WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$z')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='sub'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrConst(ty='i64', val=5)
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$y'))
WasmInstrConst(ty='i64', val=2)
WasmInstrVarLocal(op='set', id=WasmId(id='$z'))
WasmInstrVarLocal(op='get', id=WasmId(id='$y'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrConst(ty='i64', val=1)
WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$z'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='sub')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='c'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))), Assign(var=Ident(name='d'), right=Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
Try to extract stmt: [Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'}
Statement: Assign(var=Ident(name='a'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a'))]
Statement: Assign(var=Ident(name='b'), right=Name(name=Ident(name='a'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='a'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$a'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b'))]
Statement: Assign(var=Ident(name='c'), right=Name(name=Ident(name='b'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='b'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$b'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c'))]
Statement: Assign(var=Ident(name='d'), right=Name(name=Ident(name='c'), ty=NotVoid(ty=Int())))
Expression: Name(name=Ident(name='c'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$c'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c')), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrVarLocal(op='set', id=WasmId(id='$d'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))], ty=Void())
Expression: Name(name=Ident(name='d'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$d'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrVarLocal(op='get', id=WasmId(id='$d'))]
Search 'd' in {'a': 'i64', 'b': 'i64', 'c': 'i64', 'd': 'i64'}
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$d')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$a')), WasmInstrVarLocal(op='get', id=WasmId(id='$a')), WasmInstrVarLocal(op='set', id=WasmId(id='$b')), WasmInstrVarLocal(op='get', id=WasmId(id='$b')), WasmInstrVarLocal(op='set', id=WasmId(id='$c')), WasmInstrVarLocal(op='get', id=WasmId(id='$c')), WasmInstrVarLocal(op='set', id=WasmId(id='$d')), WasmInstrVarLocal(op='get', id=WasmId(id='$d')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$a'))
WasmInstrVarLocal(op='get', id=WasmId(id='$a'))
WasmInstrVarLocal(op='set', id=WasmId(id='$b'))
WasmInstrVarLocal(op='get', id=WasmId(id='$b'))
WasmInstrVarLocal(op='set', id=WasmId(id='$c'))
WasmInstrVarLocal(op='get', id=WasmId(id='$c'))
WasmInstrVarLocal(op='set', id=WasmId(id='$d'))
WasmInstrVarLocal(op='get', id=WasmId(id='$d'))
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------
Try to extract stmt: [StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {}
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))], ty=Void())
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrCall(id=WasmId(id='$print_i64'))

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=38, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=38, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38)]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=38), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=38)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------
Try to extract stmt: [Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))), StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))] (current var_types: {})
Try to extract stmt: [Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())] (current var_types: {'x': 'i64'})

Script run from: ['/cc/src/compilers/lang_loop/loop_compiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/common/genericCompiler.py', '/cc/src/main.py', '/cc/src/main.py']
Vars: {'x': 'i64'}
Statement: Assign(var=Ident(name='x'), right=Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int())))
Expression: Call(name=Ident(name='input_int'), args=[], ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: []
Call 'Ident(name='input_int')' 'NotVoid(ty=Int())' args: []
 -> Return Exp Instr.: [WasmInstrCall(id=WasmId(id='$input_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x'))]
Statement: StmtExp(exp=Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void()))
Expression: Call(name=Ident(name='print'), args=[BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))], ty=Void())
Expression: BinOp(left=IntConst(value=10, ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: IntConst(value=10, ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10)]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), op=Add(), right=BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
Expression: BinOp(left=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), op=Add(), right=Name(name=Ident(name='x'), ty=NotVoid(ty=Int())), ty=NotVoid(ty=Int()))
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
Expression: Name(name=Ident(name='x'), ty=NotVoid(ty=Int()))
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x'))]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
Call 'Ident(name='print')' 'Void()' args: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add')]
 -> Return Exp Instr.: [WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]
 -> Return statements: [WasmInstrCall(id=WasmId(id='$input_i64')), WasmInstrVarLocal(op='set', id=WasmId(id='$x')), WasmInstrConst(ty='i64', val=10), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrVarLocal(op='get', id=WasmId(id='$x')), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrNumBinOp(ty='i64', op='add'), WasmInstrCall(id=WasmId(id='$print_i64'))]



Wasm Result Code:

WasmInstrCall(id=WasmId(id='$input_i64'))
WasmInstrVarLocal(op='set', id=WasmId(id='$x'))
WasmInstrConst(ty='i64', val=10)
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrVarLocal(op='get', id=WasmId(id='$x'))
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrNumBinOp(ty='i64', op='add')
WasmInstrCall(id=WasmId(id='$print_i64'))
  -> Try to compile Int() (<class 'lang_loop.loop_ast.Int'>) to wasm data type.

--------------------------------

--------------------------------